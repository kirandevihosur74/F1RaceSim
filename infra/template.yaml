AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: F1 Race Simulator - AI-powered Formula 1 strategy analysis

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        POWERTOOLS_SERVICE_NAME: f1-race-simulator

Resources:
  # S3 Bucket for simulation results and data storage
  SimulationDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub f1-race-simulator-${Environment}-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldSimulations
            Status: Enabled
            ExpirationInDays: 90

  # DynamoDB Table for user subscriptions
  UserSubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub f1-user-subscriptions-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: subscription_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: subscription_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SubscriptionIdIndex
          KeySchema:
            - AttributeName: subscription_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for user usage tracking
  UserUsageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub f1-user-usage-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: feature_date_key
          AttributeType: S
        - AttributeName: feature_name
          AttributeType: S
        - AttributeName: reset_date
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: feature_date_key
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: FeatureDateIndex
          KeySchema:
            - AttributeName: feature_name
              KeyType: HASH
            - AttributeName: reset_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ResetDateIndex
          KeySchema:
            - AttributeName: reset_date
              KeyType: HASH
            - AttributeName: user_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for user actions logging
  UserActionsLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub f1-user-actions-log-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: action_type
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ActionTypeIndex
          KeySchema:
            - AttributeName: action_type
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
            - AttributeName: user_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for strategy metadata (existing)
  StrategyMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub f1-strategy-metadata-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: strategy_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: strategy_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

   # Explicit API Gateway resource


  # Lambda function for the FastAPI application
  F1RaceSimulatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub f1-race-simulator-${Environment}
      CodeUri: ../backend/
      Handler: main.handler
      Environment:
        Variables:
          SIMULATION_BUCKET: !Ref SimulationDataBucket
          METADATA_TABLE: !Ref StrategyMetadataTable
          GEMINI_API_KEY: '{{resolve:secretsmanager:gemini-api-key:SecretString:api_key}}'
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref SimulationDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref StrategyMetadataTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserSubscriptionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserUsageTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserActionsLogTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:gemini-api-key-*
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
Outputs:
  F1RaceSimulatorApi:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
    Export:
      Name: !Sub ${AWS::StackName}-ApiUrl

  SimulationDataBucket:
    Description: S3 bucket for simulation data
    Value: !Ref SimulationDataBucket
    Export:
      Name: !Sub ${AWS::StackName}-SimulationBucket

  UserSubscriptionsTable:
    Description: DynamoDB table for user subscriptions
    Value: !Ref UserSubscriptionsTable
    Export:
      Name: !Sub ${AWS::StackName}-UserSubscriptionsTable

  UserUsageTable:
    Description: DynamoDB table for user usage tracking
    Value: !Ref UserUsageTable
    Export:
      Name: !Sub ${AWS::StackName}-UserUsageTable

  UserActionsLogTable:
    Description: DynamoDB table for user actions logging
    Value: !Ref UserActionsLogTable
    Export:
      Name: !Sub ${AWS::StackName}-UserActionsLogTable

  StrategyMetadataTable:
    Description: DynamoDB table for strategy metadata
    Value: !Ref StrategyMetadataTable
    Export:
      Name: !Sub ${AWS::StackName}-MetadataTable

  F1RaceSimulatorFunction:
    Description: Lambda function ARN
    Value: !GetAtt F1RaceSimulatorFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-FunctionArn